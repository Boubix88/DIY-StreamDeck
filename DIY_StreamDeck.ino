// Aide : https://www.waveshare.com/wiki/1.28inch_LCD_Module#Resources
// Aide : https://dronebotworkshop.com/gc9a01/

#include <Adafruit_GFX.h>
#include <Adafruit_GC9A01A.h>
#include <HID-Project.h>
#include <HID-Settings.h>
#include <ArduinoJson.h>
#include <ArduinoJson.hpp>
#include <WS2812.h>
#include "protothreads.h"

#define BOUTON_PLAY 2
#define BOUTON_PREVIOUS 3
#define BOUTON_NEXT 4
#define PLAY 0x78

#define TFT_DC 7
#define TFT_CS 10
#define TFT_RST 8

#define NB_LED 14
#define PIN_LED 9

#define DEG2RAD 0.0174532925

#define icon_cpu_width 64
#define icon_cpu_height 64

const unsigned char PROGMEM icon_cpu[] = {
   0x00, 0xe0, 0x07, 0x1f, 0xf8, 0xe0, 0x07, 0x00, 0x00, 0xe0, 0x87, 0x3f,
   0xfc, 0xe1, 0x07, 0x00, 0x00, 0xf0, 0x8f, 0x3f, 0xfc, 0xf1, 0x0f, 0x00,
   0x00, 0x70, 0x8e, 0x3b, 0xdc, 0x71, 0x0e, 0x00, 0x00, 0x70, 0x8e, 0x3b,
   0xdc, 0x71, 0x0e, 0x00, 0x00, 0x70, 0x8e, 0x3b, 0xdc, 0x71, 0x0e, 0x00,
   0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x80, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x01, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
   0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0xc0, 0xf9, 0xff, 0xff,
   0xff, 0xff, 0x9f, 0x03, 0xc0, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x03,
   0xfc, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x3f, 0xff, 0x1d, 0x00, 0x00,
   0x00, 0x00, 0xb8, 0xff, 0xff, 0x9d, 0x0f, 0x00, 0x00, 0x00, 0xb8, 0xff,
   0xc7, 0xdd, 0x1f, 0x00, 0x00, 0x00, 0xb8, 0xe3, 0xc7, 0xdd, 0x1f, 0x00,
   0x00, 0x00, 0xb8, 0xe3, 0xff, 0xdd, 0x0f, 0x00, 0x00, 0x00, 0xb8, 0xff,
   0xff, 0xdd, 0x03, 0x00, 0x00, 0x00, 0xb8, 0xff, 0xfc, 0xdd, 0x03, 0x00,
   0x00, 0x00, 0xb8, 0x3f, 0xc0, 0x9d, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x03,
   0xc0, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x03, 0xc0, 0x1d, 0x00, 0x00,
   0x00, 0x00, 0xb8, 0x03, 0xfe, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x7f,
   0xff, 0x1d, 0xf8, 0xf8, 0xc3, 0x61, 0xb8, 0xff, 0xff, 0x1d, 0xfc, 0xf9,
   0xcf, 0x71, 0xb8, 0xff, 0xc7, 0x1d, 0xfe, 0xfb, 0xcf, 0x71, 0xb8, 0xe3,
   0xff, 0x1d, 0xde, 0x3b, 0xde, 0x71, 0xb8, 0xff, 0xff, 0x1d, 0x8e, 0x3b,
   0xdc, 0x71, 0xb8, 0xff, 0xfe, 0x1d, 0x8e, 0x3b, 0xde, 0x71, 0xb8, 0x7f,
   0xc0, 0x1d, 0x0e, 0xf8, 0xdf, 0x71, 0xb8, 0x03, 0xc0, 0x1d, 0x0e, 0xf8,
   0xcf, 0x71, 0xb8, 0x03, 0xc0, 0x1d, 0x0e, 0xf8, 0xc7, 0x71, 0xb8, 0x03,
   0xc0, 0x1d, 0x0e, 0xf8, 0xc1, 0x71, 0xb8, 0x03, 0xfe, 0x1d, 0x8e, 0x3b,
   0xc0, 0x71, 0xb8, 0x7f, 0xff, 0x1d, 0x8e, 0x3b, 0xc0, 0x71, 0xb8, 0xff,
   0xff, 0x1d, 0xde, 0x3b, 0xc0, 0x7b, 0xb8, 0xff, 0xc7, 0x1d, 0xfe, 0x3b,
   0xc0, 0x7f, 0xb8, 0xe3, 0xff, 0x1d, 0xfc, 0x39, 0x80, 0x3f, 0xb8, 0xff,
   0xff, 0x1d, 0xf8, 0x38, 0x00, 0x1f, 0xb8, 0xff, 0xfe, 0x1d, 0x00, 0x00,
   0x00, 0x00, 0xb8, 0x7f, 0xc0, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x03,
   0xc0, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x03, 0xc0, 0x1d, 0x00, 0x00,
   0x00, 0x00, 0xb8, 0x03, 0xfc, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x3f,
   0xff, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xb8, 0xff, 0xff, 0x1d, 0x00, 0x00,
   0x00, 0x00, 0xb8, 0xff, 0xc7, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xb8, 0xe3,
   0xc7, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xb8, 0xe3, 0xff, 0x1d, 0x00, 0x00,
   0x00, 0x00, 0xb8, 0xff, 0xff, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xb8, 0xff,
   0xfc, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x3f, 0xc0, 0xfd, 0xff, 0xff,
   0xff, 0xff, 0xbf, 0x03, 0xc0, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x03,
   0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x80, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x01, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
   0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x70, 0x8e, 0x3b,
   0xdc, 0x71, 0x0e, 0x00, 0x00, 0x70, 0x8e, 0x3b, 0xdc, 0x71, 0x0e, 0x00,
   0x00, 0x70, 0x8e, 0x3b, 0xdc, 0x71, 0x0e, 0x00, 0x00, 0xf0, 0x8f, 0x3f,
   0xfc, 0xf1, 0x0f, 0x00, 0x00, 0xe0, 0x87, 0x3f, 0xfc, 0xe1, 0x07, 0x00,
   0x00, 0xe0, 0x07, 0x1f, 0xf8, 0xe0, 0x07, 0x00 };

#define icon_gpu_width 64
#define icon_gpu_height 64
const unsigned char PROGMEM icon_gpu[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x7f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x07, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x7e, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x70, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x7f, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x7e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x07, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xe0, 0x7f, 0xe7, 0x03, 0x00, 0x00, 0x00, 0x00, 0xe0,
   0x77, 0xf7, 0x07, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x77, 0xf7, 0x07, 0x00,
   0x00, 0x00, 0x00, 0xe0, 0x77, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
   0x77, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x77, 0x77, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xe0, 0x77, 0x67, 0x80, 0x1f, 0x7f, 0x1c, 0x0e, 0xe0,
   0x7f, 0x07, 0xc0, 0x3f, 0xff, 0x1c, 0x0e, 0xe0, 0x7f, 0x07, 0xe0, 0x3f,
   0xff, 0x1d, 0x0e, 0xe0, 0x7e, 0x07, 0xe0, 0x38, 0xe7, 0x1d, 0x0e, 0xe0,
   0x70, 0x07, 0xe0, 0x38, 0xc7, 0x1d, 0x0e, 0xe0, 0x7f, 0x07, 0xe0, 0x38,
   0xe7, 0x1d, 0x0e, 0xe0, 0x7f, 0x07, 0xe0, 0x00, 0xff, 0x1d, 0x0e, 0xe0,
   0x7f, 0x07, 0xe0, 0x3e, 0xff, 0x1c, 0x0e, 0xe0, 0x77, 0x07, 0xe0, 0x3e,
   0x7f, 0x1c, 0x0e, 0xe0, 0x77, 0x07, 0xe0, 0x3e, 0x07, 0x1c, 0x0e, 0xe0,
   0x77, 0x07, 0xe0, 0x38, 0x07, 0x1c, 0x0e, 0xe0, 0x77, 0x07, 0xe0, 0x38,
   0x07, 0x3c, 0x0f, 0xe0, 0x77, 0x07, 0xe0, 0x3f, 0x07, 0xfc, 0x07, 0xe0,
   0x77, 0x07, 0xc0, 0x3f, 0x07, 0xf8, 0x07, 0xe0, 0x77, 0x07, 0xc0, 0x1f,
   0x07, 0xf0, 0x03, 0xe0, 0x77, 0x07, 0x00, 0x06, 0x03, 0xc0, 0x00, 0xe0,
   0x77, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x77, 0x07, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xe0, 0x77, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
   0x7f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x7f, 0x07, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xe0, 0x7f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
   0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x70, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,
   0x70, 0x77, 0x9c, 0x73, 0xce, 0x39, 0xce, 0x39, 0x70, 0xf7, 0xff, 0x7f,
   0xfe, 0xff, 0xff, 0x3f, 0xf0, 0xf7, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0x3f,
   0xf0, 0xe7, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0x3f, 0xe0, 0x03, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

#define volume_icon_width 100
#define volume_icon_height 100
const unsigned char volume_icon[] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
   0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xfc, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xfe, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x80, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xe0, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x1f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x1f, 0x00,
   0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x1f,
   0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff,
   0x1f, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff,
   0xff, 0x1f, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc,
   0xff, 0xff, 0x1f, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xfe, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00,
   0x00, 0xc0, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00,
   0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xfc, 0x1f, 0x00,
   0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xf8, 0x1f,
   0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x1f, 0xf0,
   0x3f, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x1f, 0x80, 0x3f,
   0xe0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x80,
   0x7f, 0xe0, 0x7f, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x1f,
   0x80, 0xff, 0xc0, 0xff, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x1f, 0x80, 0xff, 0x81, 0xff, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x1f, 0x80, 0xff, 0x81, 0xff, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0x1f, 0x80, 0xff, 0x03, 0xff, 0x01, 0xfe, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x1f, 0x00, 0xff, 0x07, 0xfe, 0x01, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xfe, 0x07, 0xfe, 0x03, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xfc, 0x0f, 0xfe, 0x03, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xf8, 0x0f, 0xfc, 0x03,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xf8, 0x1f, 0xfc,
   0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xf0, 0x1f,
   0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xe0,
   0x1f, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00,
   0xe0, 0x3f, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f,
   0x00, 0xc0, 0x3f, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x1f, 0x00, 0xc0, 0x3f, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x1f, 0x00, 0xc0, 0x3f, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0x1f, 0x00, 0x80, 0x7f, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x1f, 0x00, 0x80, 0x7f, 0xf0, 0x0f, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x80, 0x7f, 0xf0, 0x0f, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x80, 0x7f, 0xe0, 0x0f, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x80, 0x7f, 0xe0, 0x0f,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x80, 0x7f, 0xe0,
   0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x80, 0x7f,
   0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x80,
   0x7f, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00,
   0x80, 0x7f, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f,
   0x00, 0x80, 0x7f, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x1f, 0x00, 0x80, 0x7f, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x1f, 0x00, 0x80, 0x7f, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0x1f, 0x00, 0x80, 0x7f, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x1f, 0x00, 0x80, 0x7f, 0xf0, 0x0f, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xc0, 0x3f, 0xf0, 0x0f, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xc0, 0x3f, 0xf0, 0x0f, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xc0, 0x3f, 0xf8, 0x0f,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xe0, 0x3f, 0xf8,
   0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xe0, 0x1f,
   0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xf0,
   0x1f, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00,
   0xf8, 0x1f, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f,
   0x00, 0xf8, 0x0f, 0xfc, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x1f, 0x00, 0xfc, 0x0f, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x1f, 0x00, 0xfe, 0x07, 0xfe, 0x03, 0xfe, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0x1f, 0x00, 0xff, 0x07, 0xfe, 0x01, 0xfe, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x1f, 0x80, 0xff, 0x03, 0xff, 0x01, 0xf8, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x1f, 0x80, 0xff, 0x81, 0xff, 0x00, 0xc0, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x80, 0xff, 0x81, 0xff, 0x00, 0x00,
   0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x80, 0xff, 0xc0, 0xff, 0x00,
   0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x80, 0x7f, 0xe0, 0x7f,
   0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x1f, 0x80, 0x3f, 0xe0,
   0x3f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x1f,
   0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x1f, 0x00,
   0x00, 0xf8, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x1f,
   0x00, 0x00, 0xfc, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff,
   0x1f, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
   0xff, 0x1f, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
   0xff, 0xff, 0x1f, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xfc, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xf8, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xe0, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x7e, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x18, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x1f, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x1f, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x1f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff,
   0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
   0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xfc, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00 };


Adafruit_GC9A01A tft = Adafruit_GC9A01A(TFT_CS, TFT_DC, TFT_RST);

pt modeThread;
pt mainThread;

char lastScreen = 'c';
char currentScreen = '?';
uint8_t mode = 0;
uint8_t speed = 20;

// Variables pour le chrono
unsigned long MS; 
unsigned long start;
unsigned long tmpStart;
const long resetInterval = 3;  // Intervalle de temps pour réinitialiser le timer

uint8_t lastVolume = 0;

//Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NB_LED,PIN_LED, NEO_GRB + NEO_KHZ800);
WS2812 LED(NB_LED); // 14 LEDs
cRGB value;

void startScreen() {
    tft.setCursor(40, 115);
    tft.setTextSize(2);
    tft.setTextColor(GC9A01A_WHITE);
    tft.println("Connection ..."); // Afficher connecion ...
}

uint8_t fillArc(uint8_t x, uint8_t y, uint8_t start_angle, uint8_t seg_count, uint8_t rx, uint8_t ry, uint8_t w, uint8_t colour){
    byte seg = 3; // Segments are 3 degrees wide = 120 segments for 360 degrees
    byte inc = 3; // Draw segments every 3 degrees, increase to 6 for segmented ring

    // Calculate first pair of coordinates for segment start
    float sx = cos((start_angle - 90) * DEG2RAD);
    float sy = sin((start_angle - 90) * DEG2RAD);
    uint8_t x0 = sx * (rx - w) + x;
    uint8_t y0 = sy * (ry - w) + y;
    uint8_t x1 = sx * rx + x;
    uint8_t y1 = sy * ry + y;

  // Draw colour blocks every inc degrees
  for (uint8_t i = start_angle; i < start_angle + seg * seg_count; i += inc) {

    // Calculate pair of coordinates for segment end
    float sx2 = cos((i + seg - 90) * DEG2RAD);
    float sy2 = sin((i + seg - 90) * DEG2RAD);
    uint8_t x2 = sx2 * (rx - w) + x;
    uint8_t y2 = sy2 * (ry - w) + y;
    uint8_t x3 = sx2 * rx + x;
    uint8_t y3 = sy2 * ry + y;

    tft.fillTriangle(x0, y0, x1, y1, x2, y2, colour);
    tft.fillTriangle(x1, y1, x2, y2, x3, y3, colour);

    // Copy segment end to sgement start for next segment
    x0 = x2;
    y0 = y2;
    x1 = x3;
    y1 = y3;
  }
}

void displayVolume(uint8_t receivedVolume){
    // Calcul de l'angle pour représenter le volume
    uint8_t volumeAngle = (uint8_t) map(receivedVolume, 0, 100, 0, 360); // Volume en pourcentage vers angle en degre

    /*Serial.print("Angle : ");
    Serial.println(volumeAngle);*/

    tft.fillScreen(GC9A01A_BLACK);

    // Centre du cercle
    uint8_t centerX = tft.width() / 2;
    uint8_t centerY = tft.height() / 2;

    uint8_t start_angle = 0;
    uint8_t r = 110;

    // On dessine l'arc pour le volume du son
    for (uint8_t n = 0; n < 1; n++) {
      fillArc(centerX, centerY, 0, volumeAngle/3, centerX-n*20, centerY-n*20, 20, GC9A01A_BLUE);
    }

    // Afficher l'icône de volume au milieu de l'écran
    //tft.drawXBitmap(70, 30, volume_icon, volume_icon_width, volume_icon_height, GC9A01A_WHITE);

    // Afficher le texte du volume en dessous de l'icône
    tft.fillRect(70, 150, 90, 60, GC9A01A_BLACK);
    if (receivedVolume >=0 && receivedVolume < 10) {
      tft.setCursor(100, 150);
    } else {
      tft.setCursor(70, 150);
    }
    tft.setTextSize(8);
    tft.setTextColor(GC9A01A_WHITE);
    tft.println(receivedVolume); // Afficher le volume
}

void displayTemp(uint8_t cpuTemp, uint8_t gpuTemp) {
    tft.fillRect(130, 60, 80, 80, GC9A01A_BLACK);
    tft.fillRect(130, 145, 80, 80, GC9A01A_BLACK);

    // Afficher l'icône de CPU en haut
    //tft.drawXBitmap(50, 50, icon_cpu, icon_cpu_width, icon_cpu_height, GC9A01A_WHITE);

    tft.setTextSize(5);
    tft.setTextColor(GC9A01A_WHITE);

    tft.setCursor(130, 60);
    tft.println(cpuTemp); // Afficher la temperature cpu

    // Afficher l'icône de CPU en haut
    //tft.drawXBitmap(50, 130, icon_gpu, icon_gpu_width, icon_gpu_height, GC9A01A_WHITE);

    tft.setCursor(130, 145);
    tft.println(gpuTemp); // Afficher la temperature gpu
}

void setStaticLedColor(uint8_t r, uint8_t g, uint8_t b) {
    //pixels.clear(); //On éteuint8_t les leds allumé
    for(uint8_t i=0; i < NB_LED; i++){ // On parcour toute les leds
      value.r = r; value.g = g; value.b = b;
      LED.set_crgb_at(i, value);
    }

    LED.sync();
}

void processReceivedData() {
  // Obtient le temps actuel
  MS = millis()-start;

  /*Serial.print(F("Arduino : "));
  Serial.print((MS / 1000) / 60);
  Serial.print(F(" : "));
  Serial.print((MS / 1000) % 60);
  Serial.print(F(" : "));
  Serial.println(MS % 1000);*/

  uint8_t seconde = (MS / 1000) % 60;;

  // Vérifie si le port série est prêt à être écrit
  if (Serial.availableForWrite()) {
    Serial.print(F("Arduino : "));
    Serial.print(seconde);
    Serial.print(F(" <= "));
    Serial.print(resetInterval);
    Serial.print(F("  ---  ecran : "));
    Serial.print(currentScreen);
    Serial.print(F("   ----   Start : "));
    Serial.println(start);
  }


  if (Serial.available() > 0) {
    // Lecture des données JSON envoyées par le port série
    StaticJsonDocument<300> jsonDocument;
    DeserializationError error = deserializeJson(jsonDocument, Serial);

    if (error) {
      // Gestion des erreurs de lecture JSON
      /*Serial.print(F("deserializeJson() failed: "));
      Serial.println(error.c_str());*/
      return;
    }

    // Vérification du type de données reçu
    if (jsonDocument.containsKey("volume") || (currentScreen == 'v'/* && milliS != -1*/)) {
      // On réactive le chrono
      if (start == 0 || start == tmpStart) {
        start = millis();
      } else if (seconde > resetInterval) { // Si les 3s sont ecoulées alors on réinitialise millis
        //milliS = -1;
        start = millis();
        currentScreen = '?';
      }

      if (lastScreen == 't' || lastScreen == 'c') {
        // Effacer l'écran précédent
        tft.fillScreen(GC9A01A_BLACK);
      }

      currentScreen = 'v';

      //previousMillis = currentMillis;  // Sauvegarde le temps actuel

      // Si le JSON contient la clé "volume", on récupère la valeur du volume
      uint8_t volume = jsonDocument["volume"];
      lastVolume = volume;
      displayVolume(volume);
      lastScreen = 'v';
    } else if (jsonDocument.containsKey("temperature")/*jsonDocument.containsKey("cpu") && jsonDocument.containsKey("gpu")*/) {
      if (lastScreen == 'v' || lastScreen == 'c') {
        // Effacer l'écran précédent
        tft.fillScreen(GC9A01A_BLACK);
      }

      // Si le JSON contient les clés "cpu" et "gpu", on récupère les valeurs de température CPU et GPU
      uint8_t cpuTemp = jsonDocument["temperature"]["cpu"];
      uint8_t gpuTemp = jsonDocument["temperature"]["gpu"];
      displayTemp(cpuTemp, gpuTemp);
      lastScreen = 't';
    } else if (jsonDocument.containsKey("color")) {
      // on verifie le type du RGB
      if (jsonDocument["color"]["Mode"] == 2 || (uint8_t) jsonDocument["color"]["Mode"] == 3){
        mode = jsonDocument["color"]["Mode"];
        speed = jsonDocument["color"]["Speed"];
      } else if (jsonDocument["color"]["Mode"] == 1) {
        uint8_t r = jsonDocument["color"]["R"];
        uint8_t g = jsonDocument["color"]["G"];
        uint8_t b = jsonDocument["color"]["B"];

        setStaticLedColor(r, g, b); // la luminosité est gerée avant l'envoi
      }
      
    }
  } else {
    if (lastScreen != 'c') {
      // Effacer l'écran précédent
      tft.fillScreen(GC9A01A_BLACK);
    }

    startScreen();
    lastScreen = 'c';
  }
}

cRGB Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  cRGB color;

  if (WheelPos < 85) {
    color.r = 255 - WheelPos * 3;
    color.g = 0;
    color.b = WheelPos * 3;
  } else if (WheelPos < 170) {
    WheelPos -= 85;
    color.r = 0;
    color.g = WheelPos * 3;
    color.b = 255 - WheelPos * 3;
  } else {
    WheelPos -= 170;
    color.r = WheelPos * 3;
    color.g = 255 - WheelPos * 3;
    color.b = 0;
  }
  return color;
}

void rainbow(uint8_t wait) {
  uint16_t i, j;
  //Serial.println("Rainbow");

  for (j = 0; j < 256; j++) {
    for (i = 0; i < NB_LED; i++) {
      LED.set_crgb_at(i, Wheel((i + j) & 255));
    }
    LED.sync();
    delay(wait);
  }
}

void rainbowCycle(uint8_t wait) {
  uint16_t i, j;
  //Serial.println("Rainbow cycle");

  for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
    for(i=0; i< NB_LED; i++) {
      LED.set_crgb_at(i, Wheel(((i * 256 / NB_LED) + j) & 255));
    }
    LED.sync();
    delay(wait);
  }
}


int handleMode(/*struct pt *pt*/) {
  //PT_BEGIN(pt);

  //while(1) {
    switch (mode) {
      case 2: // Défilement par led
       uint16_t i, j;
      //Serial.println("Rainbow cycle");

      for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
        for(i=0; i< NB_LED; i++) {
          LED.set_crgb_at(i, Wheel(((i * 256 / NB_LED) + j) & 255));
        }
        LED.sync();
        //delay(speed);
        //PT_YIELD(pt);
      }
        break;

      case 3: // Défilement Statique
        for (j = 0; j < 256; j++) {
          for (i = 0; i < NB_LED; i++) {
            LED.set_crgb_at(i, Wheel((i + j) & 255));
          }
          LED.sync();
          //delay(speed);
          //PT_YIELD(pt);
        }
        break;

      default: // Default
        //setStaticLedColor(0, 0, 255);
        //PT_YIELD(pt);
        break;
    }
    //PT_YIELD(pt);
  //}

  //PT_END(pt);
}


int handleMain(/*struct pt *pt*/) {
  //PT_BEGIN(pt);

  //while(1) {
    // Bouton PLAY/PAUSE
    if (digitalRead(BOUTON_PLAY) == LOW) {
      //Serial.println("Play/Pause");

      // On envoi la commande
      Consumer.write(MEDIA_PLAY_PAUSE);

      delay(200);
    }

    // On recoit des données donc on affiche le volume
    processReceivedData();

    //PT_YIELD(pt);
  //}

  //PT_END(pt);
}


void setup() {
  // Initialisation du bouton 1
  pinMode(BOUTON_PLAY,INPUT_PULLUP);

  // Initialisation de la communication série
  Serial.begin(2000000);

  // begin HID connection
  Consumer.begin();

  // Initialisation des leds
  LED.setOutput(PIN_LED);
  LED.setColorOrderGRB();

  value.r = 0, value.g = 0, value.b = 0;
  for(uint8_t i=0; i<NB_LED; i++){ // On parcour toute les leds
    LED.set_crgb_at(i, value);
    LED.sync();
  }
  value.b = 255;
  
  // Chargement led bleue
  for(uint8_t i=0; i<NB_LED; i++){ // On parcour toute les leds
    LED.set_crgb_at(i, value);
    LED.sync();
    delay(100);
  }
  
  // On initialise l'ecran
  tft.begin();

  //Serial.print(F("Starting ..."));
  tft.fillScreen(GC9A01A_BLACK);
  startScreen();
  delay(500);

  // Initialisez la structure pt
  /*PT_INIT(&modeThread);
  PT_INIT(&mainThread);*/
  
  // Attente de la connexion au port série
  while (!Serial) {
    ;
  }

  start = 0;
  tmpStart = start;

  //Serial.println(F("Done!"));

}

void loop() {
  //PT_SCHEDULE(handleMain(&mainThread));

  handleMain();
  handleMode();

  // Transformer la boucle pour qu'elle se fasse par rapport à la boucle 
  //PT_SCHEDULE(handleMode(&modeThread)); // Remplacez modeValue et speedValue par vos valeurs réelles

}