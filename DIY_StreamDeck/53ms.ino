/*#include <cbor.h>

extern const uint8_t cborData[] = {
  0xb9, 0x00, 0x03, 0x61, 0x73, 0xb9, 0x00, 0x02, 0x61, 0x74, 0xb9, 0x00, 0x02, 0x61, 0x74, 0x85,
  0x84, 0x14, 0x18, 0x3c, 0x03, 0x63, 0x2d, 0x2d, 0x43, 0x84, 0x18, 0xa0, 0x18, 0x3c, 0x03, 0x63,
  0x2d, 0x2d, 0x25, 0x84, 0x14, 0x18, 0xaa, 0x03, 0x62, 0x2d, 0x2d, 0x84, 0x18, 0xa0, 0x18, 0xaa,
  0x03, 0x63, 0x32, 0x38, 0x33, 0x84, 0x18, 0x5a, 0x18, 0x6e, 0x04, 0x63, 0x43, 0x50, 0x55, 0x61,
  0x63, 0x66, 0x30, 0x30, 0x30, 0x30, 0x46, 0x46, 0x61, 0x76, 0x81, 0x82, 0x78, 0xd9, 0x4d, 0x31,
  0x36, 0x31, 0x20, 0x38, 0x36, 0x48, 0x38, 0x35, 0x56, 0x31, 0x36, 0x31, 0x48, 0x31, 0x36, 0x31,
  0x5a, 0x4d, 0x31, 0x38, 0x38, 0x20, 0x31, 0x33, 0x32, 0x48, 0x31, 0x36, 0x34, 0x56, 0x31, 0x34,
  0x30, 0x48, 0x31, 0x38, 0x38, 0x56, 0x31, 0x35, 0x34, 0x48, 0x31, 0x36, 0x34, 0x56, 0x31, 0x36,
  0x36, 0x48, 0x31, 0x35, 0x32, 0x56, 0x31, 0x39, 0x31, 0x48, 0x31, 0x33, 0x37, 0x56, 0x31, 0x36,
  0x36, 0x48, 0x31, 0x33, 0x31, 0x56, 0x31, 0x39, 0x31, 0x48, 0x31, 0x31, 0x35, 0x56, 0x31, 0x36,
  0x36, 0x48, 0x31, 0x30, 0x38, 0x56, 0x31, 0x39, 0x31, 0x48, 0x39, 0x35, 0x56, 0x31, 0x36, 0x36,
  0x48, 0x38, 0x32, 0x56, 0x31, 0x35, 0x34, 0x48, 0x35, 0x38, 0x56, 0x31, 0x34, 0x30, 0x48, 0x38,
  0x32, 0x56, 0x31, 0x33, 0x32, 0x48, 0x35, 0x38, 0x56, 0x31, 0x31, 0x38, 0x48, 0x38, 0x32, 0x56,
  0x31, 0x30, 0x39, 0x48, 0x35, 0x38, 0x56, 0x39, 0x36, 0x48, 0x38, 0x32, 0x56, 0x38, 0x34, 0x48,
  0x39, 0x35, 0x56, 0x36, 0x30, 0x48, 0x31, 0x30, 0x38, 0x56, 0x38, 0x34, 0x48, 0x31, 0x31, 0x35,
  0x56, 0x36, 0x30, 0x48, 0x31, 0x33, 0x31, 0x56, 0x38, 0x34, 0x48, 0x31, 0x33, 0x37, 0x56, 0x36,
  0x30, 0x48, 0x31, 0x35, 0x32, 0x56, 0x38, 0x34, 0x48, 0x31, 0x36, 0x34, 0x56, 0x39, 0x36, 0x48,
  0x31, 0x38, 0x38, 0x56, 0x31, 0x30, 0x39, 0x48, 0x31, 0x36, 0x34, 0x56, 0x31, 0x31, 0x38, 0x48,
  0x31, 0x38, 0x38, 0x56, 0x31, 0x33, 0x32, 0x66, 0x30, 0x30, 0x30, 0x30, 0x46, 0x46, 0x61, 0x63,
  0x85, 0x01, 0x18, 0x43, 0x18, 0xa8, 0x18, 0x75, 0x18, 0x32, 0x63, 0x63, 0x6c, 0x72, 0xf4
};

void printCborValue(CborValue *it, int indent = 0);

void printIndent(int indent) {
  for (int i = 0; i < indent; i++) Serial.print("  ");
}

void printCborValue(CborValue *it, int indent) {
  if (cbor_value_is_map(it)) {
    CborValue mapIt;
    cbor_value_enter_container(it, &mapIt);
    Serial.println("{");
    while (!cbor_value_at_end(&mapIt)) {
      // clé
      char key[64] = {0};
      size_t keyLen = sizeof(key);
      if (cbor_value_is_text_string(&mapIt)) {
        cbor_value_copy_text_string(&mapIt, key, &keyLen, &mapIt);
        printIndent(indent + 1);
        Serial.print("\"");
        Serial.print(key);
        Serial.print("\" : ");
      } else {
        Serial.println("Clé non textuelle !");
        break;
      }

      // valeur
      printCborValue(&mapIt, indent + 1);
    }
    printIndent(indent);
    Serial.println("}");
    cbor_value_leave_container(it, &mapIt);

  } else if (cbor_value_is_array(it)) {
    CborValue arrIt;
    cbor_value_enter_container(it, &arrIt);
    Serial.println("[");
    while (!cbor_value_at_end(&arrIt)) {
      printIndent(indent + 1);
      printCborValue(&arrIt, indent + 1);
    }
    printIndent(indent);
    Serial.println("]");
    cbor_value_leave_container(it, &arrIt);

  } else if (cbor_value_is_integer(it)) {
    int val;
    cbor_value_get_int(it, &val);
    Serial.println(val);
    cbor_value_advance(it);

  } else if (cbor_value_is_text_string(it)) {
    char str[64] = {0};
    size_t len = sizeof(str);
    cbor_value_copy_text_string(it, str, &len, it);
    Serial.print("\"");
    Serial.print(str);
    Serial.println("\"");

  } else if (cbor_value_is_byte_string(it)) {
    uint8_t buf[64];
    size_t len = sizeof(buf);
    cbor_value_copy_byte_string(it, buf, &len, it);
    Serial.print("ByteString(");
    for (size_t i = 0; i < len; i++) {
      if (i > 0) Serial.print(" ");
      Serial.print(buf[i], HEX);
    }
    Serial.println(")");

  } else if (cbor_value_is_boolean(it)) {
    bool b;
    cbor_value_get_boolean(it, &b);
    Serial.println(b ? "true" : "false");
    cbor_value_advance(it);

  } else if (cbor_value_is_null(it)) {
    Serial.println("null");
    cbor_value_advance(it);

  } else {
    Serial.println("Type inconnu ou non géré");
    cbor_value_advance(it);
  }
}

void setup() {
  Serial.begin(115200);
  while (!Serial);

  Serial.println("Début du parsing CBOR...");

  unsigned long startTime = millis();   // Début du chrono

  CborParser parser;
  CborValue it;

  if (cbor_parser_init(cborData, sizeof(cborData), 0, &parser, &it) != CborNoError) {
    Serial.println("Erreur d'initialisation du parser CBOR");
    return;
  }

  printCborValue(&it, 0);

  unsigned long elapsedTime = millis() - startTime;  // Temps écoulé

  Serial.print("Parsing CBOR terminé en ");
  Serial.print(elapsedTime);
  Serial.println(" ms.");

  Serial.println("Fin du parsing CBOR.");
}

void loop() {}*/